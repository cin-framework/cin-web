/**
         * Advanced CSS Compressor
         * @package CIN Framework
         * @author Mawi Man
         * @license Proprietary - All rights reserved to Ayoub Alarjani
         */
const cssInput=document.getElementById("cssInput"),cssOutput=document.getElementById("cssOutput"),compressBtn=document.getElementById("compressBtn"),formatBtn=document.getElementById("formatBtn"),copyBtn=document.getElementById("copyBtn"),inputStats=document.getElementById("inputStats"),outputStats=document.getElementById("outputStats"),compressionRatio=document.getElementById("compressionRatio");function advancedCSSCompress(e){if(!e||"string"!=typeof e)return"";let t=e;return t=t.replace(/\/\*[\s\S]*?\*\//g,""),t=t.replace(/\s+/g," "),t=t.replace(/\s*([{}:;,>+~])\s*/g,"$1"),t=t.replace(/;}/g,"}"),t=t.replace(/\s*\(\s*/g,"("),t=t.replace(/\s*\)\s*/g,")"),t=t.replace(/font-family:\s*["']([^"',]+)["']/g,"font-family:$1"),t=t.replace(/#([0-9a-fA-F])\1([0-9a-fA-F])\2([0-9a-fA-F])\3/g,"#$1$2$3"),t=t.replace(/\b0+(\.\d+)/g,"$1"),t=t.replace(/\b(\d+)\.0+(\D)/g,"$1$2"),t=t.replace(/\b0(px|em|rem|%|pt|pc|in|cm|mm|ex|ch|vw|vh|vmin|vmax)\b/g,"0"),t=t.replace(/(margin|padding):(\d+px)\s+\2\s+\2\s+\2/g,"$1:$2"),t=t.replace(/(margin|padding):(\d+px)\s+(\d+px)\s+\2\s+\3/g,"$1:$2 $3"),t=t.replace(/\b0+(\.\d+)/g,"$1"),t=t.trim(),t}function formatCSSCode(e){if(!e||"string"!=typeof e)return"";let t=e;t=t.replace(/\s+/g," ").trim(),t=t.replace(/{/g,"{\n"),t=t.replace(/}/g,"\n}\n"),t=t.replace(/;(?![^()]*\))/g,";\n");const s=t.split("\n");let n=0;return t=s.map((e=>{if(!(e=e.trim()))return"";e.includes("}")&&(n=Math.max(0,n-1));const t=" ".repeat(4*n)+e;return e.includes("{")&&n++,t})).join("\n").replace(/\n{3,}/g,"\n\n"),t}function formatCSS(){const e=cssInput.value;if(e.trim())try{formatBtn.disabled=!0,formatBtn.textContent="Formatting...",setTimeout((()=>{const t=formatCSSCode(e);cssOutput.value=t,copyBtn.disabled=!1;const s=e.length,n=t.length,o=((n-s)/s*100).toFixed(1);outputStats.textContent=`${n.toLocaleString()} characters`,compressionRatio.textContent=o>0?`${o}% larger`:`${Math.abs(o)}% smaller`,showMessage("CSS formatted successfully!","success"),formatBtn.disabled=!1,formatBtn.textContent="Format CSS"}),100)}catch(e){showMessage("Error formatting CSS: "+e.message,"error"),formatBtn.disabled=!1,formatBtn.textContent="Format CSS"}else showMessage("Please enter CSS code to format.","error")}function compressCSS(){const e=cssInput.value;if(e.trim())try{compressBtn.disabled=!0,compressBtn.textContent="Compressing...",setTimeout((()=>{const t=advancedCSSCompress(e);cssOutput.value=t,copyBtn.disabled=!1;const s=e.length,n=t.length,o=((s-n)/s*100).toFixed(1);outputStats.textContent=`${n.toLocaleString()} characters`,compressionRatio.textContent=`${o}% smaller`,showMessage("CSS compressed successfully!","success"),compressBtn.disabled=!1,compressBtn.textContent="Compress CSS"}),100)}catch(e){showMessage("Error compressing CSS code.","error"),compressBtn.disabled=!1,compressBtn.textContent="Compress CSS"}else showMessage("Please enter CSS code to compress.","error")}function copyCompressed(){cssOutput.value?navigator.clipboard.writeText(cssOutput.value).then((()=>{showMessage("Code copied successfully!","success"),copyBtn.textContent="Copied!",setTimeout((()=>{copyBtn.textContent="Copy"}),2e3)})).catch((()=>{showMessage("Failed to copy code.","error")})):showMessage("No compressed code to copy.","error")}function clearInput(){cssInput.value="",cssOutput.value="",copyBtn.disabled=!0,inputStats.textContent="0 characters",outputStats.textContent="0 characters",compressionRatio.textContent=""}function showMessage(e,t="info"){let s=document.getElementById("compressionMessage");s||(s=document.createElement("div"),s.id="compressionMessage",s.className="cin-alert cin-mt-4",document.querySelector(".cin-card").appendChild(s)),s.className=`cin-alert cin-alert-${t} cin-mt-4`,s.textContent=e,s.style.display="block",setTimeout((()=>{s.style.display="none"}),3e3)}function scrollToTop(){window.scrollTo({top:0,behavior:"smooth"})}cssInput.addEventListener("input",(()=>{const e=cssInput.value.length;inputStats.textContent=`${e.toLocaleString()} characters`})),window.addEventListener("load",(()=>{document.getElementById("loadingScreen").style.display="none"})),document.addEventListener("keydown",(e=>{if(e.ctrlKey||e.metaKey)switch(e.key){case"Enter":e.preventDefault(),compressCSS();break;case"r":e.preventDefault(),clearInput();break}})),window.onload=()=>{const e=location.pathname.split("/").pop().replace(".html","");window.parent.postMessage({page:e},"*")};